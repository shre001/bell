# -*- coding: utf-8 -*-
"""Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1St_67fktCLs5IH3HOfpfAZPvUYBjt9dk
"""

# -*- coding: utf-8 -*-
# author Shreyas Bhaktavatsala
"""geoJas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OAGC5Bhwgfi1vAe_izey6cuv8oGJniEV
"""

from shapely.geometry import Polygon, Point, MultiPolygon
import pandas as pd
from tqdm import tqdm
from geopy.geocoders import Nominatim  
import progressbar
from time import sleep
import json

lat = []
lon = []
def readLatLon(): 
  global lat
  global lon
  # reading csv files
  df= pd.read_csv(r"coordinates2.csv")
  nom=Nominatim(user_agent="Bell",timeout=11)
    # cleaning data postal code as geocode takes only in 'B3j 2k9' format
    # But the data in csv is 'b3j2k9'
  df["postal1"]=df["Postal code"]
  df["postal1"]=df.postal1.str.slice(0,3)
  df["postal2"]=df["Postal code"].str.slice(3,7)
  df["postal"]=df["postal1"]+" "+df["postal2"]
    # Concatenating fields to form a complete address
  df["Address"]=df["Prov"]+" "+df["postal"]
  df['Coordin'] = tqdm(df['Address'].apply(nom.geocode))
    # Storing all latitudes to variable
  df["latitude"] = df['Coordin'].apply(lambda x: x.latitude if x != None else None)
     # Storing all Longitudes to variable
  df["longitude"] = df['Coordin'].apply(lambda x: x.longitude if x != None else None)
  lat = df["latitude"].tolist()
  lon = df["longitude"].tolist()

def readGeo():
  #to check if point is within polygon
  with open("/content/Videotron_LTE_150E.geojson") as f:
    data=json.load(f)
  poly_list=[]
  for feature in data["features"]:
    #print(feature["geometry"]["type"])
    #print(feature["geometry"]["coordinates"])
    poly_list.append(feature["geometry"]["coordinates"])
  
  for p in range(len(poly_list)):
    sample=poly_list[p][0]
    print(sample)
    #getting the hole coordinates
    hole=[]
    for h in range(1,len(poly_list[p])):
      if(len(poly_list[p])!=1):
        hole.append(poly_list[p][h])
    polygon=Polygon(sample,hole)
    outF = open("myOutFile.txt", "w")
    for i in range (len(lat)):
      point = Point(lon[i],lat[i])  
      pointStr=str(point)
      text=str(p)
      # point in polygon test
      if polygon.contains(point):
        print ('inside polygon',p)
        outF.write(pointStr)
        outF.write(' True:inside polygon')
        outF.write(text)
        outF.write("\n")
      else:
        outF.write(pointStr)
        outF.write(' False:Outside polygon')
        outF.write(text)
        outF.write("\n")
        print ('OUT')
    outF.close()

# By default magic word name is set to "__main__" and the status bar is started    
if __name__ =="__main__":
  bar = progressbar.ProgressBar(maxval=20, \
  widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage()])
  bar.start()
  readLatLon()
  readGeo()
  sleep(0.1)
  bar.finish()